# Nginx main configuration
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    # Server block for your API
    server {
        listen 80; # Listen on HTTP. Cloudflare (if proxied) will connect via HTTP to your origin.

        server_name api.bsumser.dev; # <--- IMPORTANT: Change this to your API domain

        location / {
            # --- CORS HEADERS ---
            # Allow requests from your frontend origin
            add_header 'Access-Control-Allow-Origin' 'https://bsumser.dev';
            # Allow specific HTTP methods your API supports
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            # Allow specific headers in requests
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            # Expose headers that your frontend might need to read
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            # If your frontend sends credentials (cookies, HTTP authentication)
            add_header 'Access-Control-Allow-Credentials' 'true';

            # Handle preflight OPTIONS requests (sent by browsers for complex CORS requests)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000; # Cache preflight response for a long time (e.g., 20 days)
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204; # No Content response for preflight
            }
            # --- END CORS HEADERS ---

            proxy_pass http://mtg-node:8081; # This proxies to your Node.js service within the Docker network
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host; # Ensures the original Host header is passed to the backend
            proxy_cache_bypass $http_upgrade;
            
            # Recommended additional headers for proxying real client IP
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # Tells backend if original request was HTTP/HTTPS
        }

        error_log /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log;
    }
}