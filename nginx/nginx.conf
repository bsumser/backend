# Nginx main configuration
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    # Server block for your API
    server {
        listen 80;
        server_name api.bsumser.dev;

        # âœ… NEW: Location for serving static MTG images
        location /static/images/ {
            alias /usr/share/nginx/html/static/images/; # Path inside Nginx container where images are mounted
            try_files $uri =404; # Serve the file if it exists, otherwise 404
            expires 7d;          # Add browser caching for 7 days
            add_header Cache-Control "public";

            # --- CORS for Images ---
            # If images are public and accessed via <img> tags, complex CORS might not be needed.
            # If accessed via JavaScript (fetch/XHR) from different origins, you'll need CORS.
            if ($cors_origin != "") {
                add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
            }
            # For public images, '*' might be simpler if the dynamic origin isn't strictly needed for images:
            # add_header 'Access-Control-Allow-Origin' '*' always;

            # Handle preflight OPTIONS requests for images if necessary
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always; # Images are typically GET/HEAD
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Range' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            # --- END CORS for Images ---
        }

        location / {
            # --- CORS HEADERS ---
            # Allow requests from your deployed frontend origin AND your local development origin
            # Ensure there's only one 'Access-Control-Allow-Origin' header.
            # You cannot specify multiple values in a single header, so we need to
            # dynamically set it based on the incoming Origin header if it's allowed.
            # This is more robust than hardcoding two, as it handles the exact origin.

            # Set a variable for allowed origins
            # This checks if the $http_origin (the Origin header from the client)
            # is one of your allowed domains/localhosts.
            set $cors_origin "";
            if ($http_origin ~* "^(https?:\/\/bsumser\.dev|http:\/\/localhost:5173|http:\/\/localhost:3000)$") {
                set $cors_origin $http_origin;
            }

            # Only add the header if the origin is explicitly allowed
            if ($cors_origin != "") {
                add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always; # Required if frontend sends cookies
            }

            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;


            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            # --- END CORS HEADERS ---

            proxy_pass http://mtg-node:8081; # This proxies to your Node.js service within the Docker network
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        error_log /var/log/nginx/error.log;
        access_log /var/log/nginx/access.log;
    }
}