name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'         # Run on all branches
  pull_request:
    branches:
      - master       # Run tests on PRs targeting master

jobs:
  test:
    name: Run Jest Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run Jest tests
        run: npm test

  deploy:
      name: Deploy to DigitalOcean
      runs-on: ubuntu-latest
      needs: test
      if: github.ref == 'refs/heads/master'
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup SSH
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

        - name: Deploy via SSH with Docker Compose
          run: |
            ssh -i ~/.ssh/id_ed25519 bsumser@${{ secrets.DROPLET_HOST }} << 'EOF'
              # Ensure GitHub's host key is trusted
              ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null || true
          
              cd ~/backend/ || exit 1
          
              # Discard any local changes and untracked files to ensure a clean state
              git reset --hard origin/master
              git clean -df
          
              # --- UPDATED DOCKER COMPOSE INSTALLATION ---
              # Remove apt install for docker-compose-plugin as it's not found.
              # Instead, install the latest standalone docker-compose binary.
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              # Optional: Verify the version installed (good for debugging)
              /usr/local/bin/docker-compose version
              # --- END UPDATED DOCKER COMPOSE INSTALLATION ---
          
              # Clean up dangling images, containers, volumes, and networks
              # This helps prevent issues from previous failed builds or old states.
              docker system prune -af
          
              git pull origin master
          
              # --- IMPORTANT: Use 'docker-compose' (with a hyphen) now ---
              # Use the full path to ensure the newly installed binary is used
              /usr/local/bin/docker-compose pull
              /usr/local/bin/docker-compose up -d --build --force-recreate
              # --- END IMPORTANT ---
            EOF
